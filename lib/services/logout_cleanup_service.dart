import 'package:shared_preferences/shared_preferences.dart';
import 'local_user_storage_service.dart';
import '../features/challenges/infrastructure/services/report_challenge_service.dart';
import '../features/challenges/infrastructure/services/distance_challenge_service.dart';

/// Servicio centralizado para la limpieza completa de datos durante el logout
/// Asegura que todos los datos del usuario sean eliminados correctamente
class LogoutCleanupService {
  static final LogoutCleanupService _instance = LogoutCleanupService._internal();
  factory LogoutCleanupService() => _instance;
  LogoutCleanupService._internal();

  /// Realiza limpieza completa de todos los datos del usuario
  static Future<void> performCompleteCleanup({String? userId}) async {
    try {
      print('üßπ === INICIO DE LIMPIEZA COMPLETA DURANTE LOGOUT ===');
      
      // 1. Limpiar datos b√°sicos del usuario
      await _clearBasicUserData();
      
      // 2. Limpiar cach√© espec√≠fico de challenges y reportes
      await _clearChallengeData(userId);
        // 3. Limpiar datos de validaciones y otros cach√©s
      await _clearValidationAndCacheData(userId);
      
      // 4. Limpiar notificaciones de logros/challenges
      await _clearChallengeNotifications(userId);
      
      // 5. Limpiar datos espec√≠ficos de la aplicaci√≥n
      await _clearApplicationSpecificData(userId);
      
      // 5. Limpieza final de cualquier dato residual
      await _performFinalCleanup(userId);
      
      print('‚úÖ === LIMPIEZA COMPLETA DURANTE LOGOUT FINALIZADA ===');
    } catch (e) {
      print('‚ùå Error durante limpieza completa: $e');
      rethrow;
    }
  }

  /// Limpia datos b√°sicos del usuario (LocalUserStorage)
  static Future<void> _clearBasicUserData() async {
    try {
      print('üîÑ Limpiando datos b√°sicos del usuario...');
      final localUserStorage = LocalUserStorageService();
      await localUserStorage.clearUserData();
      print('‚úÖ Datos b√°sicos del usuario limpiados');
    } catch (e) {
      print('‚ùå Error limpiando datos b√°sicos: $e');
    }
  }
  /// Limpia datos espec√≠ficos de challenges y reportes
  static Future<void> _clearChallengeData(String? userId) async {
    try {
      print('üîÑ Limpiando datos de challenges y reportes...');
      
      // Usar el m√©todo est√°tico del ReportChallengeService
      await ReportChallengeService.clearAllUserDataOnLogout();
      
      // Limpiar datos de desaf√≠os de distancia
      await DistanceChallengeService.clearAllUserDataOnLogout();
      
      print('‚úÖ Datos de challenges y reportes limpiados');
    } catch (e) {
      print('‚ùå Error limpiando datos de challenges: $e');
    }
  }

  /// Limpia datos de validaciones y otros cach√©s espec√≠ficos
  static Future<void> _clearValidationAndCacheData(String? userId) async {
    try {
      print('üîÑ Limpiando datos de validaciones y cach√©s...');
      
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys().toList();
      
      final validationPatterns = [
        'accessibility_validation_',
        'user_validation_',
        'form_validation_',
        'cache_validation_',
        'temp_validation_',
      ];
      
      for (final key in keys) {
        bool shouldDelete = validationPatterns.any((pattern) => 
          key.startsWith(pattern) || key.contains(pattern)
        );
        
        // Si tenemos userId, tambi√©n limpiar datos espec√≠ficos de ese usuario
        if (userId != null && key.contains(userId)) {
          shouldDelete = true;
        }
        
        if (shouldDelete) {
          await prefs.remove(key);
          print('üóëÔ∏è Validaci√≥n eliminada: $key');
        }
      }
      
      print('‚úÖ Datos de validaciones y cach√©s limpiados');
    } catch (e) {
      print('‚ùå Error limpiando validaciones y cach√©s: $e');
    }
  }

  /// Limpia todas las notificaciones de challenges/logros mostradas
  static Future<void> _clearChallengeNotifications(String? userId) async {
    try {
      print('üîÑ Limpiando notificaciones de challenges/logros...');
      
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys().toList();
      
      // Limpiar todas las claves de notificaciones de challenges
      int removedCount = 0;
      for (final key in keys) {
        if (key.startsWith('notification_shown_')) {
          // Si tenemos userId espec√≠fico, solo limpiar las de ese usuario
          if (userId != null) {
            if (key.endsWith('_$userId')) {
              await prefs.remove(key);
              removedCount++;
              print('üóëÔ∏è Notificaci√≥n eliminada: $key');
            }
          } else {
            // Si no hay userId espec√≠fico, limpiar todas las notificaciones
            await prefs.remove(key);
            removedCount++;
            print('üóëÔ∏è Notificaci√≥n eliminada: $key');
          }
        }
      }
      
      print('‚úÖ Notificaciones de challenges limpiadas: $removedCount eliminadas');
    } catch (e) {
      print('‚ùå Error limpiando notificaciones de challenges: $e');
    }
  }

  /// Limpia datos espec√≠ficos de la aplicaci√≥n
  static Future<void> _clearApplicationSpecificData(String? userId) async {
    try {
      print('üîÑ Limpiando datos espec√≠ficos de la aplicaci√≥n...');
      
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys().toList();
      
      final appSpecificPatterns = [
        'user_session_',
        'user_activity_',
        'user_preferences_',
        'user_settings_',
        'user_notifications_',
        'user_badges_',
        'user_achievements_',
        'user_stats_',
        'user_history_',
        'user_favorites_',
        'last_sync_',
        'sync_timestamp_',
        'app_state_',
        'navigation_history_',
        'search_history_',
        'recent_searches_',
      ];
      
      for (final key in keys) {
        bool shouldDelete = appSpecificPatterns.any((pattern) => 
          key.startsWith(pattern) || key.contains(pattern)
        );
        
        // Si tenemos userId, tambi√©n limpiar datos espec√≠ficos de ese usuario
        if (userId != null && key.contains(userId)) {
          shouldDelete = true;
        }
        
        if (shouldDelete) {
          await prefs.remove(key);
          print('üóëÔ∏è Dato espec√≠fico eliminado: $key');
        }
      }
      
      print('‚úÖ Datos espec√≠ficos de la aplicaci√≥n limpiados');
    } catch (e) {
      print('‚ùå Error limpiando datos espec√≠ficos de la aplicaci√≥n: $e');
    }
  }

  /// Limpieza final de cualquier dato residual
  static Future<void> _performFinalCleanup(String? userId) async {
    try {
      print('üîÑ Realizando limpieza final...');
      
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys().toList();
      
      // Palabras clave que sugieren datos de usuario
      final userKeywords = [
        'user',
        'usuario',
        'profile',
        'perfil',
        'account',
        'cuenta',
        'login',
        'auth',
        'session',
        'sesion',
      ];
      
      // Solo limpiar si tenemos userId para ser m√°s conservadores
      if (userId != null) {
        for (final key in keys) {
          bool containsUserKeyword = userKeywords.any((keyword) => 
            key.toLowerCase().contains(keyword)
          );
          
          bool containsUserId = key.contains(userId);
          
          // Solo eliminar si contiene el userId espec√≠fico
          if (containsUserId && containsUserKeyword) {
            await prefs.remove(key);
            print('üóëÔ∏è Dato residual eliminado: $key');
          }
        }
      }
      
      print('‚úÖ Limpieza final completada');
    } catch (e) {
      print('‚ùå Error en limpieza final: $e');
    }
  }

  /// Obtiene estad√≠sticas de la limpieza realizada
  static Future<Map<String, int>> getCleanupStats() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys();
      
      int totalKeys = keys.length;
      int userRelatedKeys = 0;
      int challengeKeys = 0;
      int validationKeys = 0;
      
      for (final key in keys) {
        if (key.contains('user') || key.contains('usuario')) {
          userRelatedKeys++;
        }
        if (key.contains('challenge') || key.contains('report')) {
          challengeKeys++;
        }
        if (key.contains('validation') || key.contains('cache')) {
          validationKeys++;
        }
      }
      
      return {
        'total_keys': totalKeys,
        'user_related_keys': userRelatedKeys,
        'challenge_keys': challengeKeys,
        'validation_keys': validationKeys,
      };
    } catch (e) {
      print('‚ùå Error obteniendo estad√≠sticas: $e');
      return {};
    }
  }

  /// M√©todo de verificaci√≥n para asegurar que la limpieza fue exitosa
  static Future<bool> verifyCleanupSuccess(String? userId) async {
    try {
      if (userId == null) return true;
      
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys();
      
      // Verificar que no queden datos cr√≠ticos del usuario
      final criticalPatterns = [
        'user_local_data',
        'current_user',
        'user_report_count_$userId',
        'challenge_completed_.*_$userId',
      ];
      
      for (final key in keys) {
        for (final pattern in criticalPatterns) {
          if (RegExp(pattern).hasMatch(key)) {
            print('‚ö†Ô∏è Dato cr√≠tico encontrado despu√©s de limpieza: $key');
            return false;
          }
        }
      }
      
      print('‚úÖ Verificaci√≥n de limpieza exitosa');
      return true;
    } catch (e) {
      print('‚ùå Error verificando limpieza: $e');
      return false;
    }
  }
}
